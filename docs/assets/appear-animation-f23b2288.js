function i(r){const s=(e,n)=>{e.forEach(t=>{if(t.isIntersecting)o(r),n.unobserve(r);else return})};window.IntersectionObserver?a(r,s):o(r)}function a(r,s){const e={root:null,threshold:0};new IntersectionObserver(s,e).observe(r)}function o(r){const s=Array.from(r.children).filter(e=>e.nodeName==="IMG"||e.nodeName==="SOURCE");s.length&&s.forEach(e=>{if(e.addEventListener("load",()=>{setTimeout(()=>e.classList.add("loaded"),100)}),e.addEventListener("error",()=>console.log("error")),!!e.dataset.url)switch(e.nodeName){case"IMG":{e.src=e.dataset.url;break}case"SOURCE":{e.srcset=e.dataset.url;break}}})}function d(r,s){const e=(n,t)=>{n.forEach(c=>{if(c.isIntersecting)r.classList.remove(s),t.unobserve(r);else return})};window.IntersectionObserver?a(r,e):r.classList.remove(s)}export{d as a,i};
